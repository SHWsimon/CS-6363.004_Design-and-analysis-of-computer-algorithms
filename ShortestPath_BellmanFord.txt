//common shortest path
Relax(u, v)
  if v.dis>u.dis+w(u, v)
    v.dis=u.dis+w(u, v)
    v.parent=u
    return true
  else
    return false
    
Initialization(S)
  for u=V{n}
    u.dis=infinity
    u.parent=null
  s.dis=0

//Bellman-Ford: O(|E|*|V|)
D^k(v)=length of a shortest path from s to u that uses at most k edges
D^k(v)= - 0, if v=s, k=0
        - infinity, if v!=s, k=0
        - min(D^(k-1)(v), D^(k-1)(u)+w(u, v), k>0 //w(u, v): weight of the edge from u to v
        
Bellman-Ford(G, S)
  Initialization(S)
  for k=1 to |V|-1
    for (u, v)=all Edge into v
      Relax(u, v)
  for (u, v)=all Edge
    if Relax(u, v)
      "G has negative cycle"
  return

